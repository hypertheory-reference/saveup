{
    "NGRX Reducer": {
        "scope": "typescript",
        "prefix": "ngrx-entity-reducer",
        "body": [
            "import { EntityState, createEntityAdapter } from '@ngrx/entity';",
            "import { createReducer, Action, on } from '@ngrx/store';",
            "",
            "export interface ${1:EntityInterface} {",
            "",
            "}",
            "",
            "export interface ${2:State} extends EntityState<$1> {",
            "",
            "}",
            "",
            "export const adapter = createEntityAdapter<$1>();",
            "",
            "const initialState = adapter.getInitialState();",
            "",
            "export const reducer = createReducer(",
            "  initialState",
            ");",
            "",
            ""
        ],
        "description": "A branch reducer"
    },
    "jasmine describe": {
        "scope": "typescript",
        "prefix": "desc",
        "body": [
            "describe('${1:what}', () => {\r",
            "\r$0",
            "});"
        ],
        "description": "jasmine describe"
    },
    "jasmine it": {
        "scope": "typescript",
        "prefix": "it",
        "body": [
            "    it('${1:what}', () => {\r",
            "        $0\r",
            "    });"
        ],
        "description": "jasmine it"
    },
    "NGRX Feature Reducer": {
        "scope": "typescript",
        "prefix": "ngrx-feature-reducer",
        "description": "Create a Feature Reducer",
        "body": [
            "import { ActionReducerMap, createFeatureSelector } from \"@ngrx/store\";",
            "",
            "export const featureName = \"${1:featureName}\";",
            "",
            "export interface ${2:FeatureInterface} {}",
            "",
            "export const reducers: ActionReducerMap<${2}> = {};",
            "",
            "const selectFeature = createFeatureSelector<${2}>(featureName);",
            ""
        ]
    },
    "Ngrx Effect Cmd To Doc": {
        "prefix": "effect-handler-cmd-to-doc",
        "body": [
            "import { HttpClient } from '@angular/common/http';",
            "import { inject } from '@angular/core';",
            "import { Actions, createEffect, ofType } from '@ngrx/effects';",
            "import { API_URL } from '@saveup/utils';",
            "import { map, mergeMap } from 'rxjs';",
            "import { ChildrenEntity } from '..';",
            "",
            "const from = ${1:FromCommand};",
            "const to = ${2:ToDocument};",
            "export const ${3:Name} = createEffect(",
            "  (actions\\$ = inject(Actions), http = inject(HttpClient)) => {",
            "\treturn actions\\$.pipe(",
            "\t\tofType(from),",
            "\t\tmergeMap(({ payload }) =>  ",
            "\t\t\thttp",
            "\t\t\t.post<ChildrenEntity>(API_URL + `${4:Path}`, payload)",
            "\t\t\t\t.pipe(",
            "\t\t\t\t\tmap((payload) => to({ payload }))",
            "\t\t\t\t)",
            "\t\t)",
            "\t",
            "\t);",
            "  },",
            "  { functional: true, dispatch: true }",
            ");",
            "${0:Done}"
        ]
    },
        "Ngrx Handler Effect Event to Command": {
            "prefix": "effect-handler-event-to-command",
            "body": [
                "import { inject } from \"@angular/core\";",
                "import { Actions, createEffect, ofType } from \"@ngrx/effects\";",
                "import { map } from \"rxjs\";",
                "",
                "const from = ${1:FromEvent};",
                "const to = ${2:ToCommand};",
                "export const ${3:Name} = createEffect(",
                "  (actions\\$ = inject(Actions)) => {",
                "\treturn actions\\$.pipe(",
                "\t  ofType(from),",
                "\t  map(({ payload }) => to({ payload }))",
                "\t);",
                "  },",
                "  { functional: true }",
                ");",
                "${0}"
            ]
        }
}